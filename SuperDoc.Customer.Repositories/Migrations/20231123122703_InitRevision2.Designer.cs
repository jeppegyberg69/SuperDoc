// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SuperDoc.Customer.Repositories.Contexts;

#nullable disable

namespace SuperDoc.Customer.Repositories.Migrations
{
    [DbContext(typeof(SuperDocContext))]
    [Migration("20231123122703_InitRevision2")]
    partial class InitRevision2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CaseUser", b =>
                {
                    b.Property<Guid>("CaseManagersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CasesCaseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CaseManagersUserId", "CasesCaseId");

                    b.HasIndex("CasesCaseId");

                    b.ToTable("CaseUsers", (string)null);
                });

            modelBuilder.Entity("DocumentUser", b =>
                {
                    b.Property<Guid>("DocumentsDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExternalUsersUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentsDocumentId", "ExternalUsersUserId");

                    b.HasIndex("ExternalUsersUserId");

                    b.ToTable("DocumentExternalUsers", (string)null);
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Cases.Case", b =>
                {
                    b.Property<Guid>("CaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ResponsibleUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CaseId");

                    b.HasIndex("ResponsibleUserId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Documents.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateCreated")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("DocumentId");

                    b.HasIndex("CaseId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Documents.Revision", b =>
                {
                    b.Property<Guid>("RevisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateUploaded")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<Guid?>("DocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RevisionId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("UserId");

                    b.ToTable("Revision");
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Users.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsDisabled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserSignedUp")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("EmailAddress")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CaseUser", b =>
                {
                    b.HasOne("SuperDoc.Customer.Repositories.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("CaseManagersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperDoc.Customer.Repositories.Entities.Cases.Case", null)
                        .WithMany()
                        .HasForeignKey("CasesCaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentUser", b =>
                {
                    b.HasOne("SuperDoc.Customer.Repositories.Entities.Documents.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsDocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SuperDoc.Customer.Repositories.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("ExternalUsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Cases.Case", b =>
                {
                    b.HasOne("SuperDoc.Customer.Repositories.Entities.Users.User", "ResponsibleUser")
                        .WithMany("ResonsibleCases")
                        .HasForeignKey("ResponsibleUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Documents.Document", b =>
                {
                    b.HasOne("SuperDoc.Customer.Repositories.Entities.Cases.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Documents.Revision", b =>
                {
                    b.HasOne("SuperDoc.Customer.Repositories.Entities.Documents.Document", "Document")
                        .WithMany("Revisions")
                        .HasForeignKey("DocumentId");

                    b.HasOne("SuperDoc.Customer.Repositories.Entities.Users.User", "User")
                        .WithMany("Revisions")
                        .HasForeignKey("UserId");

                    b.Navigation("Document");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Documents.Document", b =>
                {
                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("SuperDoc.Customer.Repositories.Entities.Users.User", b =>
                {
                    b.Navigation("ResonsibleCases");

                    b.Navigation("Revisions");
                });
#pragma warning restore 612, 618
        }
    }
}
